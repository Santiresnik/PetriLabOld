# -*- coding: utf-8 -*-
"""PetriLab - Modelo CV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVR_-6NUVuJsn5hYDqOM5HW7xKMx5eD4
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import cv2
from google.colab.patches import cv2_imshow
from numpy.lib.polynomial import poly
from PIL import Image, ImageDraw
from sklearn.cluster import KMeans
import zipfile

#from cvlib.object_detection import draw_bbox
#import cvlib as cv

!pip freeze

!wget --no-check-certificate \
    "https://figshare.com/ndownloader/files/35973995" \
    -O "/tmp/Petri_plates.zip" #Se descarga el zip desde el instalador de la pagina

zip_ref = zipfile.ZipFile('/tmp/Petri_plates.zip', 'r') #Opens the zip file in read mode
zip_ref.extractall('/tmp') #Extracts the files into the /tmp folder
zip_ref.close()

img = cv2.imread("/tmp/Petri_plates/IMG_7743ecoli_T0_10^-6_19.JPG")


#img = cv2.imread("manteca.jpg")
"""
if img.shape[0] != img.shape[1]:
  gra = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  _,thresh = cv2.threshold(gra,1,255,cv2.THRESH_BINARY)
  contours,hierarchy = cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
  cnt = contours[0]
  x,y,w,h = cv2.boundingRect(cnt)

  crop = img[y:y+h,x:x+w]

img = img[600:2800, 500:2700]
"""
if img.shape[::2] != (400,400):
  crop = cv2.resize(img, (int(int(img.shape[1]) * 400/int(img.shape[1])), int(int(img.shape[0]) * 400/int(img.shape[0]))), cv2.INTER_AREA)

plt.imshow(crop)

gray = cv2.cvtColor(crop, cv2.COLOR_BGR2GRAY)
plt.imshow(gray, cmap="gray")

mask = np.full((img.shape[0], img.shape[1]), 0, dtype=np.uint8)  # mask is only
for i in circles[0, :]:
    cv2.circle(mask, (i[0], i[1]), i[2], (255, 255, 255), -1)

# get first masked value (foreground)
fg = cv2.bitwise_or(img, img, mask=mask)

# get second masked value (background) mask must be inverted
mask = cv2.bitwise_not(mask)
background = np.full(img.shape, 255, dtype=np.uint8)
bk = cv2.bitwise_or(background, background, mask=mask)

# combine foreground+background
final = cv2.bitwise_or(fg, bk)

cv2_imshow(final)

blur = cv2.GaussianBlur(gray, (7, 7), 0)
plt.imshow(blur, cmap="gray")

canny = cv2.Canny(blur, 15, 75, 3)
plt.imshow(canny, cmap="gray")

"""
filterSize =(70, 70)
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, filterSize)

# Reading the image named 'input.jpg'

median = cv2.medianBlur(gray, 5)

# Applying the Top-Hat operation
tophat_img = cv2.morphologyEx(median, cv2.MORPH_TOPHAT, kernel)

#plt.imshow(input_image)
plt.imshow(tophat_img, cmap="gray")
"""

dilated = cv2.dilate(canny, (1,1), iterations = 2)
plt.imshow(dilated, cmap="gray")

"""
contrast = cv2.convertScaleAbs(tophat_img, alpha=5, beta=8)

noiseless = cv2.fastNlMeansDenoising(contrast, None, 20, 7, 30)

ret, bin_img = cv2.threshold(noiseless, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
opening = cv2.morphologyEx(bin_img, cv2.MORPH_OPEN, kernel)

plt.imshow(opening, cmap="gray")
"""

h = dilated.shape[0]
w = dilated.shape[1]
lum_img = Image.new('L',[h,w] ,0)
draw = ImageDraw.Draw(lum_img)
draw.pieslice([(45,45),(h-45,w-45)],0,360,fill=255)
img_arr = np.array(dilated)
lum_img_arr = np.array(lum_img)
cv2_imshow(lum_img_arr)

"""
final_img_arr = np.dstack((img_arr, lum_img_arr))
deganger = (Image.fromarray(final_img_arr))
open_cv_image = np.array(deganger)
# Convert RGB to BGR
open_cv_image = open_cv_image[:, :, ::-1].copy()
"""
x = cv2.subtract(img_arr, lum_img_arr)

final_img_arr = cv2.subtract(dilated,x)
deganger = (Image.fromarray(final_img_arr))
plt.imshow(deganger, cmap="gray")

circles = cv2.HoughCircles(final_img_arr, cv2.HOUGH_GRADIENT, 1.2, 100)
circles = np.uint16(np.around(circles))

for i in circles[0, :]:

  cv2.circle(final_img_arr,(i[0],i[1]),i[2],(0,255,0),2)

  cv2.circle(final_img_arr,(i[0],i[1]),2,(0,0,255),3)

cv2_imshow(final_img_arr)

arrImg = np.array(deganger)
cvImg = cv2.cvtColor(arrImg, cv2.COLOR_RGB2BGR)
escalope = cv2.cvtColor(cvImg, cv2.COLOR_BGR2GRAY)

(cnt, hierarchy) = cv2.findContours(escalope, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
rgb = cv2.cvtColor(escalope, cv2.COLOR_BGR2RGB)
cv2.drawContours(rgb, cnt, -1, (0, 255, 0), 2)

w = rgb.shape[0]
h = rgb.shape[1]

for c in cnt:
  x,y,w,h = cv2.boundingRect(cnt)
  rgb=cv2.rectangle(rgb,(x,y),(x+w,y+h),(255,0,255),2)

cv2_imshow(rgb)
#box, label, count = cv.detect_common_objects(data, enable_gpu=True)
#output = draw_bbox(data, box, label, count)

print("Cantidad de colonias : " + str(len(cnt)))